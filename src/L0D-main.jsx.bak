import React, {Component} from 'react';
import Select from 'react-select'

import L0DPartsStandards from "./components/L0D-parts-standards";
import L0DReceivers from "./components/L0D-receivers";
import L0DEnzymes from "./components/L0D-enzymes";

import { SeqViz } from "seqviz";
import { getReverseComplementSequenceString } from "ve-sequence-utils";

import Container from 'react-bootstrap/Container';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Form from 'react-bootstrap/Form';
import InputGroup from 'react-bootstrap/InputGroup';
import FormControl from 'react-bootstrap/FormControl';
import FloatingLabel from 'react-bootstrap/FloatingLabel';
import Button from 'react-bootstrap/Button';

class InputOHS extends Component {
  render() {
    return <Form.Select
    onChange={this.props.handler}
    value={this.props.cv}
    aria-label={L0DPartsStandards[this.props.standard].name + " OHs / "+ this.props.oh +"'"}
    className="oh-select" ref={"ref"+ this.props.oh} >
        {Object.keys(L0DPartsStandards[this.props.standard].ohs).map((key) => {
          return (
            <option key={key} value={key}>{L0DPartsStandards[this.props.standard].ohs[key].name}</option>
          )
        })}
    </Form.Select>
  }
}

class OHInput extends Component {
  render() {
    return <FloatingLabel controlId={"ohs" + this.props.oh} label={this.props.standard + " OHs / "+ this.props.oh +"'"}>
      <InputOHS
        standard={this.props.standard}
        oh={this.props.oh}
        handler={this.props.handler}
        cv={this.props.cv}
        />
    </FloatingLabel>;
  }
}

class SeqVizDisplay extends Component {
  render() {
    if (this.props.display){
      return <div id="seqVizContainer">
          <SeqViz
            name="L0 Part Design"
            seq={this.props.sequence}
            viewer = "linear"
            zoom = {{ linear: 80, circular: 0 }}
            annotations={this.props.annotations}
            style={{width: "100%", height: "50vh"}}
          />
        </div>;
    } else {
      return <div>Input your sequence</div>;
    }
  }
}

function clearSequence(sequence){
  return sequence.replace(/[^acgtACGT]/g, '');
}

class L0D extends Component {
  constructor(props) {
    super(props);
    const defaultStandard = 'loop';
    this.state = {
      sequence: "",
      sequence_output: "",
      standard: defaultStandard,
      oh5: L0DPartsStandards[defaultStandard].default[5],
      oh3: L0DPartsStandards[defaultStandard].default[3],
      display_seqviz: false,
      annotations: "",
      receiver: L0DReceivers['pl0r']
    };
    this.sequenceInputChangeHandle = this.sequenceInputChangeHandle.bind(this);
    this.partStandardChangeHandle = this.partStandardChangeHandle.bind(this);
    this.OH5InputChangeHandle = this.OH5InputChangeHandle.bind(this);
    this.OH3InputChangeHandle = this.OH3InputChangeHandle.bind(this);
    this.receiverInputChangeHandle = this.receiverInputChangeHandle.bind(this);
  }

  createAnnotations(){
    const receiver = this.state.receiver
    const sequenceInput = this.state.sequence

    const receiverEnzyme = receiver.enzyme;
    const receiverEnzymeSiteWithExtraNucl = receiverEnzyme.prevNucl + receiverEnzyme.site + receiverEnzyme.postNucl;
    const receiverEnzymeSiteWithExtraNuclRevComp = getReverseComplementSequenceString(receiverEnzymeSiteWithExtraNucl);

    const oh5 = L0DPartsStandards[this.state.standard].ohs[this.state.oh5];
    const oh3 = L0DPartsStandards[this.state.standard].ohs[this.state.oh3];

    const tc = oh3.tc ? "tc": "";

    const sequence_output = receiverEnzymeSiteWithExtraNucl + receiver.oh5 + oh5.oh + sequenceInput + tc + oh3.oh + receiver.oh3 + receiverEnzymeSiteWithExtraNuclRevComp;

    const enzyme5Start = receiverEnzyme.prevNucl.length;
    const enzyme5End = enzyme5Start + receiverEnzyme.site.length;
    const oh5RecStart = enzyme5End + receiverEnzyme.postNucl.length;
    const oh5RecEnd = oh5RecStart + receiver.oh5.length;
    const oh5Start = oh5RecEnd;
    const oh5End = oh5Start + oh5.oh.length;
    const sequenceStart = oh5End;
    const sequenceEnd = sequenceStart + sequenceInput.length;
    const tcStart = sequenceEnd;
    const tcEnd = tcStart + tc.length;
    const oh3Start = tcEnd;
    const oh3End =  oh3Start + oh3.oh.length;
    const oh3RecStart = oh3End;
    const oh3RecEnd = oh3RecStart + receiver.oh3.length;
    const enzyme3Start = oh3RecEnd + receiverEnzyme.postNucl.length;
    const enzyme3End = enzyme3Start + receiverEnzyme.site.length;

    var annotations = [
     { name: receiverEnzyme.name, start: enzyme5Start, end: enzyme5End, direction: 0, color: "#addcc9" },
     { name: "dOH", start: oh5RecStart, end: oh5RecEnd, direction: 0, color: "#dbebc2" },
     { name: oh5.name + "-OH", start: oh5Start, end: oh5End, direction: 0, color: "#fdd2b5" },
     { name: "Seq", start: sequenceStart, end: sequenceEnd, direction: 0, color: "#f7a8a6" },
     { name: oh3.name + "-OH", start: oh3Start, end: oh3End, direction: 0, color: "#fdd2b5" },
     { name: "dOH", start: oh3RecStart, end: oh3RecEnd, direction: 0, color: "#dbebc2" },
     { name: receiverEnzyme.name, start: enzyme3Start, end: enzyme3End, direction: 0, color: "#addcc9" },
    ];
    if(tc.length){
      annotations.push({ name: "tc", start: tcStart, end: tcEnd, direction: 0, color: "#f48b94" });
    }

    this.setState({
      sequence_output: sequence_output,
      display_seqviz: sequenceInput.length > 0? true:false,
      annotations: annotations
    });
  }

  sequenceInputChangeHandle(event) {
    const clearedSequence = clearSequence(event.target.value);
    this.setState({
      sequence: clearedSequence,
    }, () => { this.createAnnotations()});
  }

  partStandardChangeHandle(event) {
    this.setState({
      standard: event.target.value,
      oh5: L0DPartsStandards[event.target.value].default[5],
      oh3: L0DPartsStandards[event.target.value].default[3],
    }, () => { this.createAnnotations()});
  }

  receiverInputChangeHandle(event) {
    this.setState({receiver: L0DReceivers[event.target.value]}, () => { this.createAnnotations()});
  }

  OH5InputChangeHandle(event) {
    this.setState({oh5: event.target.value}, () => { this.createAnnotations()});
  }

  OH3InputChangeHandle(event) {
    this.setState({oh3: event.target.value}, () => { this.createAnnotations()});
  }

  partStandardInputItems = Object.keys(L0DPartsStandards).map(function(key) {
    return <option key={key} value={key}>{L0DPartsStandards[key].name}</option>
  });

  receiverInputItems = Object.keys(L0DReceivers).map(function(key) {
    return <option key={key} value={key}>{L0DReceivers[key].name}</option>
  });


  render() {

    const domesticationEnzymesOptions = [];
    const defaultDomesticationEnzymesOptions = [];
    Object.keys(L0DEnzymes).map(function(key) {
      domesticationEnzymesOptions.push({ value: key, label:  L0DEnzymes[key].name});
      if(key == 'sapi' || key == 'bsai')
        defaultDomesticationEnzymesOptions.push({ value: key, label:  L0DEnzymes[key].name});
    });

    return <Container fluid>
              <Row>
                <Col>
                  <h1>L0 Designer</h1>
                </Col>
              </Row>
              <Row>
                <Col>
                  <Form>
                    <FloatingLabel controlId="sequenceInput" label="Sequence Input">
                      <FormControl onChange={this.sequenceInputChangeHandle} as="textarea" value={this.state.sequence} aria-label="Sequence Input" />
                    </FloatingLabel>
                    <small>Non ATGC characters are automaticlly removed.</small>
                    <FloatingLabel controlId="partStandardInput" label="Part Standard">
                      <Form.Select onChange={this.partStandardChangeHandle} aria-label="Part standard input">
                        {this.partStandardInputItems}
                      </Form.Select>
                    </FloatingLabel>
                    <OHInput standard={this.state.standard} oh="5" cv={this.state.oh5} handler={this.OH5InputChangeHandle} />
                    <OHInput standard={this.state.standard} oh="3" cv={this.state.oh3} handler={this.OH3InputChangeHandle} />
                    <FloatingLabel controlId="receiverInput" label="Receiver">
                      <Form.Select onChange={this.receiverInputChangeHandle}  aria-label="Receiver Input">
                        {this.receiverInputItems}
                      </Form.Select>
                    </FloatingLabel>
                    <Select options={domesticationEnzymesOptions} defaultValue={defaultDomesticationEnzymesOptions} isMulti className="basic-multi-select" classNamePrefix="select" />
                  </Form>
                </Col>
                <Col>
                  <SeqVizDisplay display={this.state.display_seqviz} sequence={this.state.sequence_output} annotations={this.state.annotations} />
                </Col>
              </Row>
            </Container>;
  }
}

export default L0D;
